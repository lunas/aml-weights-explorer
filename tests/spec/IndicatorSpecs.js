// Generated by CoffeeScript 1.7.1
(function() {
  describe("Indicator", function() {
    var fatf, ml_tf, tangle;
    ml_tf = fatf = tangle = null;
    beforeEach(function() {
      ml_tf = new Category('ml/tf', 60, 'osc');
      fatf = new Indicator('fatf', 50, ml_tf);
      tangle = {
        setValue: function(variable, value) {},
        getValue: function(variable) {
          return false;
        }
      };
      return Index.set_tangle(tangle);
    });
    describe('constructor', function() {
      return it('should have category "ml_tf"', function() {
        return expect(fatf.cat).toEqual(ml_tf);
      });
    });
    describe('update_osc_weight', function() {
      return it('should set the correct tangle variable with the calculated weight', function() {
        var exp_result;
        exp_result = fatf.weight * ml_tf.weight / 100;
        spyOn(tangle, 'setValue');
        fatf.update_osc_weight();
        return expect(tangle.setValue).toHaveBeenCalledWith('fatf_osc', exp_result);
      });
    });
    describe('weight_sum_is_100', function() {
      it('returns true if the sum of weights within the same category is 100', function() {
        spyOn(fatf.cat, 'weight_sum').and.returnValue(99.1);
        return expect(fatf.weight_sum_is_100()).toBeTruthy();
      });
      return it('returns false if the sum of weights within the same category is not 100', function() {
        spyOn(fatf.cat, 'weight_sum').and.returnValue(102);
        return expect(fatf.weight_sum_is_100()).toBeFalsy();
      });
    });
    return describe('update', function() {
      beforeEach(function() {
        spyOn(fatf, 'update_osc_weight');
        spyOn(fatf, 'weight_sum_is_100').and.returnValue(true);
        return fatf.update(70);
      });
      it('sets the weight', function() {
        return expect(fatf.weight).toEqual(70);
      });
      return it('updates the osc-weight', function() {
        return expect(fatf.update_osc_weight).toHaveBeenCalled();
      });
    });
  });

}).call(this);
