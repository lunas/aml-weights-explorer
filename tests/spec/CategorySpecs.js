// Generated by CoffeeScript 1.7.1
(function() {
  describe('Category', function() {
    var category, category2, ind1, ind2, ind3, ind4, ind5, ind6, indices, tangle;
    category = category2 = ind1 = ind2 = ind3 = ind4 = ind5 = ind6 = tangle = indices = null;
    beforeEach(function() {
      category = new Category('cat', 80, 'osc');
      category2 = new Category('cat2', 20, 'osc');
      ind4 = new Indicator('ind10', 34, category2);
      ind1 = new Indicator('ind1', 50, category);
      ind2 = new Indicator('ind2', 25, category);
      ind3 = new Indicator('ind3', 25, category);
      ind5 = new Indicator('ind11', 33, category2);
      ind6 = new Indicator('ind12', 33, category2);
      tangle = {
        setValue: function(variable, value) {}
      };
      Index.set_tangle(tangle);
      Index.set_indices([ind1, ind2, ind3, ind4, ind5, ind6]);
      return Index.set_categories([category, category2]);
    });
    describe('get_my_indices', function() {
      it('has set the indices', function() {
        return expect(Index._indices.length).toEqual(6);
      });
      return it('returns a list of all indicators belonging to this category', function() {
        return expect(category.get_my_indices()).toEqual([ind1, ind2, ind3]);
      });
    });
    describe('weight_sum', function() {
      return it('sums the weights of the indicators belonging to this category', function() {
        return expect(category.weight_sum()).toEqual(100);
      });
    });
    describe('weight_sum_is_100', function() {
      it('returns true if the sum of all category weights is 100', function() {
        return expect(category.weight_sum_is_100()).toBeTruthy();
      });
      return it('returns false if the sum of all category weights is not 100', function() {
        category2.weight = 22;
        return expect(category.weight_sum_is_100()).toBeFalsy();
      });
    });
    return describe('update', function() {
      beforeEach(function() {
        spyOn(ind1, 'update_osc_weight');
        spyOn(ind2, 'update_osc_weight');
        spyOn(ind3, 'update_osc_weight');
        return category.update(70);
      });
      it('sets the weight', function() {
        return expect(category.weight).toEqual(70);
      });
      return it('updates the osc-weights of its indicators', function() {
        var ind, _i, _len, _ref, _results;
        _ref = [ind1, ind2, ind3];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ind = _ref[_i];
          _results.push(expect(ind.update_osc_weight).toHaveBeenCalled());
        }
        return _results;
      });
    });
  });

}).call(this);
