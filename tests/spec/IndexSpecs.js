// Generated by CoffeeScript 1.7.1
(function() {
  describe('Index', function() {
    var categ, index, tangle;
    categ = index = tangle = null;
    beforeEach(function() {
      categ = new Category('ml/tf', 60, 'osc');
      index = new Indicator('fatf', 50, categ);
      tangle = {
        setValue: function(variable, value) {},
        getValue: function(variable) {
          return 33;
        }
      };
      return Index.set_tangle(tangle);
    });
    describe('constructor', function() {
      it('sets the variable name', function() {
        return expect(index.variable).toEqual('fatf');
      });
      it('sets the initial weight', function() {
        return expect(index.initial_weight).toEqual(50);
      });
      return it('sets a reference to its super-category', function() {
        return expect(index.cat).toEqual(categ);
      });
    });
    describe('set_weight', function() {
      beforeEach(function() {
        spyOn(tangle, 'setValue');
        return index.set_weight(23);
      });
      it('does not change the initial_weight attribute', function() {
        return expect(index.initial_weight).toEqual(50.);
      });
      return it('sets the value via the tangle', function() {
        return expect(tangle.setValue).toHaveBeenCalledWith('fatf', 23);
      });
    });
    describe('get_weight', function() {
      it('returns the value via the tangle', function() {
        spyOn(tangle, 'getValue');
        index.get_weight();
        return expect(tangle.getValue).toHaveBeenCalledWith(index.variable);
      });
      it('returns the correct value', function() {
        return expect(index.get_weight()).toEqual(33);
      });
      it('returns the correct value even if it is 0 ', function() {
        spyOn(tangle, 'getValue').and.returnValue(0);
        return expect(index.get_weight()).toEqual(0);
      });
      describe('when the Tangle variable corresponding to the index is Null', function() {
        return it('returns the initial_weight of the index', function() {
          spyOn(tangle, 'getValue').and.returnValue(null);
          return expect(index.get_weight()).toEqual(50);
        });
      });
      return describe('when the Tangle variable corresponding to the index is undefined', function() {
        return it('returns the initial_weight of the index', function() {
          spyOn(tangle, 'getValue').and.returnValue(void 0);
          return expect(index.get_weight()).toEqual(50);
        });
      });
    });
    return describe('reset', function() {
      return it('resets the corresponding tangle weight to initial_weight', function() {
        spyOn(tangle, 'setValue');
        index.reset();
        return expect(tangle.setValue).toHaveBeenCalledWith(index.variable, index.initial_weight);
      });
    });
  });

}).call(this);
