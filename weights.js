// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Category, Index, Indicator, model, render_ranking, render_scatterplot, tangle;
    tangle = new Tangle(document.getElementById("weights-ui"), {
      initialize: function() {},
      update: function() {}
    });
    window.Index = Index = (function() {
      function Index(variable, weight, cat) {
        this.variable = variable;
        this.weight = weight;
        this.cat = cat;
      }

      Index._indices = null;

      Index._categories = null;

      Index._tangle = null;

      Index.prototype.set_weight = function(value) {
        this.weight = value;
        return Index._tangle.setValue(this.variable, this.weight);
      };

      Index.prototype.get_weight = function() {
        return Index._tangle.getValue(this.variable) || this.weight;
      };

      Index.prototype.update = function() {
        if (!this.weight_sum_is_100()) {
          return this.mark_cat();
        }
      };

      Index.prototype.weight_sum_is_100 = function() {
        return false;
      };

      Index.prototype.mark_cat = function() {};

      Index.prototype.selector = function() {
        return '[data-var=' + this.variable + ']';
      };

      Index.prototype.mark = function() {
        return $(this.selector()).addClass('not-100');
      };

      Index.prototype.unmark = function() {
        return $(this.selector()).removeClass('not-100');
      };

      Index.prototype.near_100 = function(value) {
        return Math.abs(value - 100) <= 1;
      };

      Index.set_indices = function(indices) {
        return Index._indices = indices;
      };

      Index.set_categories = function(categories) {
        return Index._categories = categories;
      };

      Index.set_tangle = function(tangle) {
        return Index._tangle = tangle;
      };

      return Index;

    })();
    window.Indicator = Indicator = (function(_super) {
      __extends(Indicator, _super);

      function Indicator() {
        return Indicator.__super__.constructor.apply(this, arguments);
      }

      Indicator.prototype.update = function(new_value) {
        this.set_weight(new_value);
        this.update_osc_weight();
        return Indicator.__super__.update.apply(this, arguments);
      };

      Indicator.prototype.update_osc_weight = function() {
        var osc_variable;
        osc_variable = this.variable + '_osc';
        return Index._tangle.setValue(osc_variable, this.calculate_osc_weight());
      };

      Indicator.prototype.calculate_osc_weight = function() {
        return this.get_weight() * this.cat.get_weight() / 100;
      };

      Indicator.prototype.weight_sum_is_100 = function() {
        return this.near_100(this.cat.weight_sum());
      };

      Indicator.prototype.mark_cat = function() {
        var index, _i, _len, _ref, _results;
        _ref = this.cat.get_my_indices;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          index = _ref[_i];
          _results.push(index.mark());
        }
        return _results;
      };

      return Indicator;

    })(Index);
    window.Category = Category = (function(_super) {
      __extends(Category, _super);

      function Category() {
        return Category.__super__.constructor.apply(this, arguments);
      }

      Category.prototype.update = function(new_value) {
        var index, sub_indices, _i, _len;
        this.set_weight(new_value);
        sub_indices = this.get_my_indices();
        for (_i = 0, _len = sub_indices.length; _i < _len; _i++) {
          index = sub_indices[_i];
          index.update_osc_weight();
        }
        return Category.__super__.update.apply(this, arguments);
      };

      Category.prototype.get_my_indices = function() {
        return Index._indices.filter((function(_this) {
          return function(e) {
            return e.cat.variable === _this.variable;
          };
        })(this));
      };

      Category.prototype.weight_sum = function() {
        var sub_indices;
        sub_indices = this.get_my_indices();
        return sub_indices.reduce(function(sum, element) {
          return sum + element.get_weight();
        }, 0);
      };

      Category.prototype.weight_sum_is_100 = function() {
        var sum;
        sum = Index._categories.reduce(function(sum, element) {
          return sum + element.get_weight();
        }, 0);
        return this.near_100(sum);
      };

      Category.prototype.mark_cat = function() {
        var cat, _i, _len, _ref, _results;
        _ref = Index._categories;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cat = _ref[_i];
          _results.push(cat.mark());
        }
        return _results;
      };

      return Category;

    })(Index);
    model = {
      categories: [new Category('ml_tf', 65, 'osc'), new Category('corruption_risk', 10, 'osc'), new Category('fin_transpar_std', 15, 'osc'), new Category('public_transpar_account', 5, 'osc'), new Category('political_legal_risk', 5, 'osc')],
      indicators: [],
      initialize: function() {
        var cat, ind, _i, _len, _ref, _results;
        this.indicators = [new Indicator('fatf', 46.15, this.categories[0]), new Indicator('fin_secrecy', 38.46, this.categories[0]), new Indicator('us_incsr', 15.18, this.categories[0]), new Indicator('ti_cpi', 100, this.categories[1]), new Indicator('business_disclosure', 12.5, this.categories[2]), new Indicator('auditing_std', 37.5, this.categories[2]), new Indicator('security_exchange', 37.5, this.categories[2]), new Indicator('fin_sector', 12.5, this.categories[2]), new Indicator('open_budget', 33.33, this.categories[3]), new Indicator('transpar_account_corr', 33.33, this.categories[3]), new Indicator('political_disclosure', 33.33, this.categories[3]), new Indicator('instit_strength', 33.33, this.categories[4]), new Indicator('rule_of_law', 33.33, this.categories[4]), new Indicator('freedom_house', 33.33, this.categories[4])];
        Index.set_indices(this.indicators);
        Index.set_categories(this.categories);
        Index.set_tangle(tangle);
        _ref = this.indicators;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ind = _ref[_i];
          this[ind.variable] = ind.get_weight();
          this[ind.variable + '_osc'] = ind.calculate_osc_weight();
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = this.categories;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              cat = _ref1[_j];
              _results1.push(this[cat.variable] = cat.weight);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      },
      update: function() {
        var ind, _i, _len, _ref, _results;
        _ref = this.indicators;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ind = _ref[_i];
          _results.push(ind.update_osc_weight());
        }
        return _results;
      }
    };
    tangle.setModel(model);
    d3.csv("aml.csv", function(error, data) {
      if (error) {
        console.log(error);
        return;
      }
      render_ranking(data);
      return render_scatterplot(data);
    });
    render_ranking = function(aml) {
      var list;
      list = d3.select('.ranking').append('table');
      return list.selectAll('tr').data(aml).enter().append('tr').html(function(row) {
        var s;
        s = '<td>' + row.country + '</td>';
        return s += '<td>' + d3.round(row["OVERALL.SCORE"], 2) + '</td>';
      });
    };
    return render_scatterplot = function(aml) {};
  });

}).call(this);
